[user]
	email = tomas.fiers@gmail.com
	name = Tomas Fiers

[pull]
    rebase = true

[github]
    user = tfiers

[log]
    date = format:%a %d-%b-%y %H:%M
        # - Legend for these placeholers: [https://stackoverflow.com/a/34778736/2611913]
        # - "date = human" is nice, but only available from git version 2.21
        #    onwards. See here for example outputs:
        #   [https://stackoverflow.com/a/54846195/2611913]
        # - "date = local" is decent (but a bit weird).
        # - This custom format I like the best in the end.
    decorate = short
        # Print 'ref names'(eg: "HEAD -> master, origin/master") besides
        # commits that have them.

[format]
    pretty = myshort
    # Provide a default value for the `--pretty` (AKA `--format`) argument of eg
    # `git log`.

[pretty]
    myshort = format:%C(cyan)%h %<(60,trunc)%C(black)%s%C(auto)%d
    dt = format:%C(cyan)%h %C(black bold)%ad %<(54,trunc)%C(black)%s %C(black bold)(%ar)%C(auto)%d
        # Placeholders:
        #   %h   Short hash.
        #   %ad  Authoring date, formatted according to the `log.date` setting.
        #        Use `%cd` for commit date.
        #   %s   Commit message subject.
        #   %ar  Authoring date in 'relative' format.
        #   %d   Ref names (see `log.decorate`), if present, wrapped in
        #        parentheses and prepended with a space.
        # Adapted from [https://stackoverflow.com/a/34778736/2611913]
    dtc = format:%C(cyan)%h %<(60,trunc)%C(black)%s%C(auto)%d%n%C(black bold) Created:  %ad%n%C(black bold) Modified: %cd%n



[alias]
    p = push
    # In all the following Bash functions, yes, both `;` are necessary.
    l = "!f() { git log ${1:--n 7}; }; f"
        # Meaning of that piece of Bash argument syntax: "insert first argument,
        # or, if not given, the default value (here: `-n 7`)".
    ld = "!f() { git log --pretty=dt ${1:--n 7}; }; f"
    lb = "!f() { git log --graph --all --date-order ${1:--n 20}; }; f"  # "log branches"
        # Options:
        #   --graph         Draw branch history with `|/\` characters. Every `*`
        #                   is a commit. The line colors are confusing (they are
        #                   random, and not related to the colors of the ref
        #                   names); so don't mind them.
        #   --all           Do not only show ancestors of HEAD (i.e. current
        #                   commit), but also from other refs (i.e. other
        #                   branches).
        #   --date-order    The default (`--topo-order`) avoids showing commits
        #                   from multiple 'lines of history' intermixed.
        #                   `--date-order` explicitly shows all historical
        #                   commits.
        # Notes:
        #   - `git log` works on:
        #       - filenames
        #       - commit hashes
        #   - Get a commit's parent by appending `^` (and `^3` for
        #     great-grandparent).
        #   - To see all commits (paged), use
        #       - `git lb .`
        #       - `git lb --date-order`
    lbd = "!f() { git log --pretty=dt --graph --all --date-order ${1:--n 20}; }; f"
    addu = add -u
    addi = add -i
    s = status
    ss = status --short
    sa = stash  # "stash away" or "stash all" or "stash: add"
    sl = stash list
    sp = stash pop
    d = "!f() { git diff --word-diff=color ${1:-.}; }; f"
    ds = "!f() { git diff --staged --word-diff=color ${1:-.}; }; f"
    c = commit
    ca = commit --amend
    can = commit --amend --no-edit
    cm = "!f() { git commit -m \"$1\"; }; f"
    acm = "!f() { git add . ; git cm \"$1\"; }; f"
        # - `add *` doesn't seem to work well in script. (It does work nicely
        #   when typed manually). Hence the `add .`s.
        # - Yes, the 'double' quoting of the argument is necessary.
    acan = "!f() { git add . ; git can; }; f"
    go = "!f() { git cm \"$1\" ; git push; }; f"
    ago = "!f() { git add . ; git cm \"$1\" ; git push; }; f"
    gud = "!f() { git ago \"$1\"; }; f"
    ri = "!f() { git rebase -i ${1:-HEAD~7}; }; f"
        # Usage:
        # - git ri {old_commit_hash}
        #       (This is short for `git ri {old_commit_hash}..HEAD`).
        # - git ri HEAD~7
        #       (Short for `git ri HEAD~7..HEAD`).
    rc = "rebase --continue"
    rv = remote -v
    rh = reset HEAD *
        # Unstage all.
    rl = reset --soft HEAD~1
        # Undo last commit.
        #  (Actual "git revert" command creates a new commit with reversals).
    rlh = reset --hard HEAD~1
        # Undo last commit, do not keep contents as unstaged changes.

[diff "jupyternotebook"]
    command = git-nbdiffdriver diff
[merge "jupyternotebook"]
    driver = git-nbmergedriver merge %O %A %B %L %P
    name = jupyter notebook merge driver
[difftool "nbdime"]
    cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
    prompt = false
[mergetool "nbdime"]
    cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
    prompt = false
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
