[user]
    email = tomas.fiers@gmail.com
    name = Tomas Fiers

[pull]
    rebase = true

[log]
    date = format:%a %d-%b-%y %H:%M
        # - "date = human" is very nice, but only available from git version 2.21
        #    onwards. See here for example outputs:
        #   [https://stackoverflow.com/a/54846195/2611913]
        # - "date = local" is decent (but a bit weird).
        # - Date placeholders: [https://stackoverflow.com/a/34778736/2611913]
    decorate = short
        # Print "ref names" (eg: "HEAD -> master, origin/master") besides
        # commits that have them.

[format]
    pretty = mycoolfmt

[pretty]
    mycoolfmt = format:%C(cyan)%h %C(black bold)%ad %<(54,trunc)%C(white)%s %C(black bold)(%ar)%C(auto)%d
        # Placeholders:
        #   %h   Short hash.
        #   %ad  Authoring date, formatted according to `log.date` setting.
        #        Use `%cd` for commit date.
        #   %d   If present: ref names (see `log.decorate`), wrapped in 
        #        parentheses and prepended with a space.
        #   %s   Commit message subject.
        # 
        # Adapted from [https://stackoverflow.com/a/34778736/2611913]

[alias]
    
    # In all these Bash functions, yes, both `;` are necessary.

    logs = "!f() { git log -n \"${1:-10}\"; }; f"
        # Bash syntax at `-n`: "first argument, or default value `10` if not given".
    logb = "!f() { git log -n \"${1:-20}\" --graph --all --date-order; }; f"
        # Options:
        #   --graph         Draw branch history with `| / \ *` characters. Every
        #                   `*` is a commit. The line colors are confusing (they
        #                   are random, and not related to the colors of the ref
        #                   names); so don't mind them.
        #   --date-order    The default, `--topo-order`, avoids showing commits
        #                   from multiple 'lines of history' intermixed.
        #                   Here we explicitly ask for that.
        #   --all           Do not only show ancestors of HEAD (i.e. current 
        #                   commit), but also from other refs (i.e. other
        #                   branches).
    addu = add -u
    addi = add -i
    s = status
    ss = status --short
    sa = stash  # stash away
    sl = stash list
    sp = stash pop
    d = diff --word-diff=color . ":(exclude)*.pdf" ":(exclude)*.ai"
    ds = diff --word-diff=color --staged . ":(exclude)*.pdf" ":(exclude)*.ai"
    c = commit
    ca = commit --amend
    can = commit --amend --no-edit
    cm = "!f() { git commit -m \"$1\"; }; f"
    ri = "!f() { git rebase -i HEAD~${1-7}; }; f" # Don't use `$`, braces, or `;` when using this command manually.
    ric = "rebase --continue"
    ls = "!f() { git logs; }; f"
    go = "!f() { git commit -m \"$1\"; git push; }; f"
    ago = "!f() { git add *; git commit -m \"$1\"; git push; }; f"
    gud = "!f() { git ago \"$1\"; }; f"
    rv = remote -v
    rh = reset HEAD * # discard changes in working dir
    rl = reset --soft HEAD~1  # "revert" last commit. (Actual "git revert" command creates a new commit with reversals).
    rlh = reset --hard HEAD~1  # "revert" last commit, do not keep contents as unstaged changes.

[diff "jupyternotebook"]
    command = git-nbdiffdriver diff
[merge "jupyternotebook"]
    driver = git-nbmergedriver merge %O %A %B %L %P
    name = jupyter notebook merge driver
[difftool "nbdime"]
    cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
    prompt = false
[mergetool "nbdime"]
    cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
    prompt = false
