# Generated with:
#
#   $ julia --startup-file=no --trace-compile="repl-trace-compile.jl"
#
#   > using OhMyREPL
#   > OhMyREPL.colorscheme!("OneLight")
#   > OhMyREPL.colorscheme!("OneDark")
#   > OhMyREPL.enable_autocomplete_brackets(true)
#   > OhMyREPL.Passes.RainbowBrackets.activate_256colors()
#   > x = [1,2]
#   > ?x
#
# Then manually removing lines with `fzf_jll`, `JLLWrappers`,
# commenting out `.var"#` lines,
# and adding these imports:

using REPL
using Markdown
using OhMyREPL.Crayons
using OhMyREPL.Tokenize

precompile(Tuple{typeof(Base.check_open), Base.TTY})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
# precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#2#29", String}, Any, Any})
precompile(Tuple{Type{Crayons.Crayon}, Crayons.ANSIColor, Crayons.ANSIColor, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle})
precompile(Tuple{typeof(Base.convert), Type{Crayons.Crayon}, Crayons.Crayon})
# precompile(Tuple{OhMyREPL.Prompt.var"#2#29", Any, Any, Any})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{Type{Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Tokens.exactkind), Tokenize.Tokens.Token})
precompile(Tuple{typeof(Base.:(==)), Tokenize.Tokens.Kind, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Tokens.kind), Tokenize.Tokens.Token})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.pipe_reader), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
# precompile(Tuple{Base.var"#readline##kw", NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Base.flush), REPL.Terminals.TTYTerminal})
# # precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#25#52", String}, Any, Any})
# precompile(Tuple{OhMyREPL.Prompt.var"#25#52", Any, Any, Any})
precompile(Tuple{typeof(Base.incomplete_tag), Symbol})
precompile(Tuple{typeof(Base.in), REPL.REPLCompletions.ModuleCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(Base.push!), Base.Set{REPL.REPLCompletions.Completion}, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.ModuleCompletion, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(REPL.REPLCompletions.completion_text), REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(REPL.REPLCompletions.get_value), Symbol, Module})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Module, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Module, Bool}, Int64, Int64})
# precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, String}, Any, Any})
# precompile(Tuple{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
# precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#5#12"{Char}, String}, Any, Any})
# precompile(Tuple{OhMyREPL.BracketInserter.var"#5#12"{Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
# # precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#2#9"{Char}, String}, Any, Any})
# precompile(Tuple{OhMyREPL.BracketInserter.var"#2#9"{Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
# # precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#22#49", String}, Any, Any})
# precompile(Tuple{OhMyREPL.Prompt.var"#22#49", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, REPL.LineEdit.TextInterface})
precompile(Tuple{typeof(OhMyREPL.colorscheme!), String})
precompile(Tuple{Type{Base.KeyError}, String})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{Base.KeyError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{Base.KeyError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{Base.KeyError, Array{Base.StackTraces.StackFrame, 1}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{Base.KeyError, Array{Base.StackTraces.StackFrame, 1}}}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{Base.KeyError, Array{Base.StackTraces.StackFrame, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{Base.KeyError, Array{Base.StackTraces.StackFrame, 1}}}, Int64, Int64})
# precompile(Tuple{Base.var"#showerror##kw", NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.TTY}, Base.KeyError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(Base.Filesystem.joinpath), Tuple{String, String, String, String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.Filesystem.joinpath), Tuple{String, String, String, String, String, String, String, String}})
# precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#55#57"{REPL.LineEdit.PrefixHistoryPrompt}, String}, Any, Any})
# precompile(Tuple{OhMyREPL.Prompt.var"#55#57"{REPL.LineEdit.PrefixHistoryPrompt}, Any, Any, Vararg{Any}})
# precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#15#42", String}, Any, Any})
# precompile(Tuple{OhMyREPL.Prompt.var"#15#42", Any, Any, Any})
# precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
# precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
# precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#11#38", String}, Any, Any})
# precompile(Tuple{OhMyREPL.Prompt.var"#11#38", Any, Any, Any})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{Type{NamedTuple{(:foreground,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:foreground,), Tuple{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, OhMyREPL.Passes.SyntaxHighlighter.ColorScheme})
precompile(Tuple{typeof(Base.write), Base.TTY, String, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, OhMyREPL.Passes.SyntaxHighlighter.ColorScheme})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, UInt8})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.enable_autocomplete_brackets), Bool})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Bool})
precompile(Tuple{typeof(OhMyREPL.Passes.RainbowBrackets.activate_256colors)})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, OhMyREPL.Passes.RainbowBrackets.RainBowTokens})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, OhMyREPL.Passes.RainbowBrackets.RainBowTokens})
precompile(Tuple{typeof(Base.sizeof), OhMyREPL.Passes.RainbowBrackets.RainBowTokens})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Array{Crayons.Crayon, 1}})
# # precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#3#10"{OhMyREPL.BracketInserter.var"#2#9"{Char}}, String}, Any, Any})
# precompile(Tuple{OhMyREPL.BracketInserter.var"#3#10"{OhMyREPL.BracketInserter.var"#2#9"{Char}}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
# precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#14#41", String}, Any, Any})
# precompile(Tuple{OhMyREPL.Prompt.var"#14#41", Any, Any, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Symbol}, Tuple{Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.Docs.aliasof), Any, Any})
precompile(Tuple{Type{Base.CanonicalIndexError}, String, Any})
precompile(Tuple{typeof(REPL.summarize), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Base.Docs.Binding})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Markdown.MD})
precompile(Tuple{Type{NamedTuple{(:raise,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:raise,), Tuple{Bool}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:foreground, :bold), T} where T<:Tuple}, Tuple{Symbol, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:foreground, :bold), Tuple{Symbol, Bool}}, Symbol})
precompile(Tuple{Type{Crayons.ANSIStyle}, Bool})
precompile(Tuple{Type{NamedTuple{(:reset,), T} where T<:Tuple}, Tuple{Bool}})
# precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:reset,), Tuple{Bool}}, Type{Crayons.Crayon}})
precompile(Tuple{typeof(Markdown.term), Base.IOContext{Base.TTY}, Markdown.Code, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8})
# precompile(Tuple{OhMyREPL.BracketInserter.var"#7#14"{REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.Prompt}})
# precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#12#39", String}, Any, Any})
# precompile(Tuple{OhMyREPL.Prompt.var"#12#39", Any, Any, Any})
precompile(Tuple{typeof(REPL.Terminals.clear), REPL.Terminals.TTYTerminal})
# # precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#21#48", String}, Any, Any})
# precompile(Tuple{OhMyREPL.Prompt.var"#21#48", Any, Any, Any})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
# precompile(Tuple{REPL.var"#48#53"{REPL.REPLBackendRef}})
